{
	// Place your global snippets here. 
	//
	// ********************************************
	// location: ~/.config/Code/User/global-snippets.code-snippets
	// on windows: %APPDATA%\Code\User\global-snippets.code-snippets
	// for me on windows: C:\Users\satya\AppData\Roaming\Code\User\snippets
	//
	// article location
	// ********************************************
	// tbd
	//
	// Web  reference
	// ********************************************
	// [My notes on knowledge management website](https://www.satyakomatineni.com/akc/item/5748)
	// [github article on vscode snipptes](https://github.com/SatyaKomatineni/articles-repo/blob/master/vscode/vscode-snippets.md)
	// [this file on github](https://github.com/SatyaKomatineni/articles-repo/blob/master/vscode/global-snippets.code-snippets)
	//
	// Version 2.0, 4/15/2025
	// ********************************************
	// For text comments
	//  
	// About
	// ********************************************
	// Each snippet is defined under a snippet name and has a scope, prefix, body and description. 
	// Add comma separated ids of the languages where the snippet is applicable in the scope field. 
	// If scope is left empty or omitted, the snippet gets applied to all languages. 
	//
	// The prefix is what is used to trigger the snippet and the body will be expanded and inserted. 
	//
	// Variables $0, 1, 2 etc.
	// ********************************************
	// Possible variables are: 
	// $1, $2 for tab stops, 
	// $0 for the final cursor position, 
	//
	// and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	//
	// Example
	// ********************************************
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"md-heading": {
		"scope": "markdown",
		"prefix": "md-heading",
		"body": [
		"<!-- ********************* -->",
		"# Some heading",
		"<!-- ********************* -->",
		"$0"
		],
		"description": "Insert a commented heading"
	},
	"md-python": {
		"scope": "markdown",
		"prefix": "md-python",
		"body": [
		"```python",
		"code",
		"```",
		"$0"
		],
		"description": "Python segment"
	},
	"md-powershell": {
		"scope": "markdown",
		"prefix": "md-powershell",
		"body": [
		"```powershell",
		"code",
		"```",
		"$0"
		],
		"description": "Powershell segment"
	},
	"md-comment": {
		"scope": "markdown",
		"prefix": "md-comment",
		"body": [
			"<!--",
			"****************************************************",
			"*",
			"*",
			"****************************************************",
			"-->",
			"$0"
		],
		"description": "html comment"
	},
	"md-empty": {
		"scope": "markdown",
		"prefix": "md-empty",
		"body": [
		"none",
		"$0"
		],
		"description": "Just an empty row"
	},
    "comments-python": {
        "scope": "python",
      "prefix": "sk_block_comments_1",
        "body": [
            "#*************************************************",
            "# Prep the template",
            "#*************************************************"
        ],
        "description": "Inserts a block comment for template preparation."
    },
    "single-line-comment-python": {
        "scope": "python",
      "prefix": "sk_single_line_comment_python",
        "body": [
            "#*************************************************"
        ],
        "description": "Inserts a block comment for template preparation."
    },
    "Block Comments": {
        "scope": "python",
      "prefix": "sk_block_comments_2",
        "body": [
            "\"\"\"",
            "*************************************************",
            "* Comments",
            "*************************************************",
            "\"\"\""
        ],
        "description": "Inserts a block comment for template preparation."
    },
   "lib_main_snippet": {
         "prefix": "sk_lib_main_snippet",
         "body": [
            "def test():",
            "    pass",
            "",
            "def localTest():",
            "    log.ph1(\"Starting local test\")",
            "    test()",
            "    log.ph1(\"End local test\")",
            "",
            "if __name__ == '__main__':",
            "    localTest()"
         ],
         "description": "Template for local testing with a main block"
      },
	  "lib_main_simple_snippet": {
		"prefix": "sk_lib_main_simple_snippet",
		"body": [
		   "if __name__ == '__main__':",
		   "    localTest()"
		],
		"description": "Template for local testing with a main block"
	 },
	 "Init Py with Package Marker Comment": {
		"scope": "python",
		"prefix": "sk_initpkg",
		"body": [
			"# **************************************************",
			"# This __init__.py file marks the directory as a Python package.",
			"# It can be empty, or you can use it to initialize package-level variables,",
			"# expose selected modules, or run setup code for the package.",
			"",
			"# Leaving this file empty is a common and valid way",
			"# to indicate that this folder is part of a Python package.",
			"# **************************************************"
		],
		"description": "Creates an __init__.py file with comments explaining its purpose."
	},
	"star line": {
		"prefix": "sk_star_under_line",
		"body": [
			"**************************************************"
		],
		"description": "An underline"
	}

}
